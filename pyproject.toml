[project]
name = "olympos_robot"
version = "0.1.0"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "playwright-stealth",
    "python-dotenv>=1.1.0",
    "requests>=2.32.3",
    "robocorp-browser>=2.3.5",
    "robocorp-tasks>=4.0.0",
    "robocorp-workitems>=1.4.7",
    "truststore>=0.10.1",
]

[tool.ruff]
# Voorkomen permission deny errors van schrijven cache. Gewoon geen cache gebruiken:
#cache-dir = ""

# Exclude common directories that are typically not part of the source code or are generated by tools.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "business-facing/layer", #OKAPI Layer
    "normenkaderzorg_pywikibot/user-config.py",
    "normenkaderzorg_pywikibot/user-password.py",
]

# Set the maximum line length to 127 characters.
line-length = 180

# Define the number of spaces used for indentation, aligning with Black's style.
indent-width = 4

# The minimum Python version to target, e.g., when considering automatic code upgrades,
# like rewriting type annotations
target-version = "py312"

[tool.ruff.lint]
select = [
    'A',  # flake8-builtins
    'ASYNC', # https://docs.astral.sh/ruff/rules/#flake8-async-async
    'B',  # flake8-bugbear
    'BLE', # flake8-blind-except
    'C4',  # unnecessary comprehensions, map()
    #'DTZ', # flake8-datetimez
    'E',  # pycodestyle
    'ERA',  # No commented out code
    'EXE', # flake8-executable
    'F',  # pyflakes
    'FLY',  # flynt
    'G',  # flake8-logging-format
    'I',  # isort
    'ICN', # https://github.com/joaopalmeiro/flake8-import-conventions
    'LOG', # flake8-logging
    'PERF', # perflint
    'PIE', # https://pypi.org/project/flake8-pie/
    'PLC',  # Pylint conventions
    'PLE',  # Pylint error
    'PLW',  # Pylint warnings
    'PT',  # https://pypi.org/project/flake8-pytest-style/
    'PTH',  # flake8 use pathlib
    'RET', # https://pypi.org/project/flake8-return/
    'RUF',  # Ruff rules
    'S',  # https://docs.astral.sh/ruff/rules/#flake8-bandit-s
    'SIM',  # https://pypi.org/project/flake8-simplify/
    'T',  # flake8-debugger
    'TRY',  # tryceratops
    'UP',  # pyupgrade
    'W',  # pycodestyle
    #'ARG',  # flake8 unused arguments (not really helpful, unused func args are common and ok)
    #'D',  # pydocstyle (too much)
    #'N',  # pep8-naming (too opinionated)
    'NPY', # numpy
    'PD', # pandas
]
ignore = ['TRY003', 'ERA001', 'PERF203']

# Allow auto-fixing of all enabled rules when using the `--fix` option.
fixable = ["ALL"]
unfixable = ["F401"] # Specify rules that cannot be auto-fixed, if any.

# Define a regex pattern for allowed unused variables (typically underscore-prefixed).
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Enforce double quotes for strings, following Black's style.
quote-style = "double"

# Use spaces for indentation, in line with Black's formatting style.
indent-style = "space"

# Keep magic trailing commas, a feature of Black's formatting.
skip-magic-trailing-comma = false

# Automatically detect and use the appropriate line ending style.
line-ending = "auto"

[tool.uv.sources]
playwright-stealth = { git = "https://github.com/Granitosaurus/playwright-stealth.git" }
